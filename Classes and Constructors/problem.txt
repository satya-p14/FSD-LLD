Inheritence : 

You are working on a project that involves different types of vehicles. Implement a Vehicle class with properties make and model. Extend this class to create a Car class that has an additional property numDoors. Ensure that the Car class inherits the properties from the Vehicle class.

const car1 = new Car('Toyota', 'Camry', 4);
console.log(car1.make);        // Output: Toyota
console.log(car1.model);       // Output: Camry
console.log(car1.numDoors);    // Output: 4


Polymorphism :

Create a base class Vehicle with a method start that prints a message indicating the vehicle has started. Implement two subclasses, Car and Motorcycle, that extend the Vehicle class. Override the start method in each subclass to provide a customized message.

const car = new Car();
car.start(); // Output: "Car started!"
const motorcycle = new Motorcycle();
motorcycle.start(); // Output: "Motorcycle started!"

Encapsulation :

You are building a simple banking system. Implement a BankAccount class with private properties accountNumber and balance. Create methods for deposit and withdraw that modify the balance property accordingly.

Problem Description:
Create a class BankAccount with private properties accountNumber and balance. The accountNumber should be generated automatically when a new account is created.
Implement a private method generateAccountNumber to generate a unique account number for each account.
Implement public methods deposit and withdraw that allow users to modify the balance property. Ensure that withdrawals cannot result in a negative balance. return 'Insufficient funds' in such cases.

const account = new BankAccount();
console.log(account.deposit(1000)); // Output: 1000
console.log(account.withdraw(500)); // Output: 500
console.log(account.withdraw(1000)); // Output: "Insufficient funds"
